pipeline {
    agent any

    parameters {
        choice(
                name: 'TEST_SUITE',
                choices: ['sequential', 'api', 'ui', 'all'],
                description: '–ö–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å: sequential (API‚ÜíUI —Å —É—Å–ª–æ–≤–∏–µ–º), api, ui, –∏–ª–∏ all'
        )

        choice(
                name: 'THREADS',
                choices: ['2', '4', '6', '8'],
                description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤'
        )

        choice(
                name: 'ENVIRONMENT',
                choices: ['dev', 'test', 'stage', 'prod'],
                description: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤'
        )

        choice(
                name: 'BROWSER',
                choices: ['chrome', 'firefox', 'edge', 'safari'],
                description: '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤'
        )

        string(
                name: 'MIN_API_PASS_RATE',
                defaultValue: '80',
                description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è API —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UI (—Ç–æ–ª—å–∫–æ –¥–ª—è sequential)'
        )

        booleanParam(
                name: 'SKIP_TESTS',
                defaultValue: false,
                description: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤'
        )

        booleanParam(
                name: 'GENERATE_REPORT',
                defaultValue: true,
                description: '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Allure –æ—Ç—á–µ—Ç'
        )

        text(
                name: 'RELEASE_NOTES',
                defaultValue: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤',
                description: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –∫ —Ä–µ–ª–∏–∑—É'
        )
    }

    environment {
        ENV = "${params.ENVIRONMENT}"
        BROWSER_TYPE = "${params.BROWSER}"
        TEST_ENVIRONMENT = "${params.ENVIRONMENT}"
    }

    stages {
        stage('Environment Setup') {
            steps {
                script {
                    echo "=== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏ ==="
                    echo "–¢–µ—Å—Ç-—Å—å—é—Ç: ${params.TEST_SUITE}"
                    echo "–û–∫—Ä—É–∂–µ–Ω–∏–µ: ${params.ENVIRONMENT}"
                    echo "–ë—Ä–∞—É–∑–µ—Ä: ${params.BROWSER}"
                    echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: ${params.THREADS}"
                    echo "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π API pass rate: ${params.MIN_API_PASS_RATE}%"
                    echo "–ó–∞–º–µ—Ç–∫–∏: ${params.RELEASE_NOTES}"

                    currentBuild.displayName = "#${BUILD_NUMBER}-${params.TEST_SUITE}-${params.ENVIRONMENT}"
                    currentBuild.description = "Suite: ${params.TEST_SUITE}, Env: ${params.ENVIRONMENT}, Browser: ${params.BROWSER}"
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('API Tests') {
            when {
                allOf {
                    expression { !params.SKIP_TESTS }
                    expression {
                        params.TEST_SUITE == 'api' ||
                                params.TEST_SUITE == 'sequential' ||
                                params.TEST_SUITE == 'all'
                    }
                }
            }
            steps {
                script {
                    echo "üöÄ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤..."

                    sh 'chmod +x ./gradlew'

                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    sh './gradlew clean'

                    // –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã
                    def apiTestResult = sh(
                            script: """
                            ./gradlew apiTest \\
                            -Djunit.threads=${params.THREADS} \\
                            -Dtest.environment=${params.ENVIRONMENT} \\
                            -Dbrowser=${params.BROWSER} \\
                            --no-daemon \\
                            --console=plain
                        """,
                            returnStatus: true
                    )

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞–¥–∏–π
                    env.API_TEST_STATUS = apiTestResult.toString()

                    if (apiTestResult != 0) {
                        echo "‚ö†Ô∏è  API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: ${apiTestResult})"
                        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º pipeline, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    } else {
                        echo "‚úÖ API —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
                    }
                }
            }
            post {
                always {
                    // –ü—É–±–ª–∏–∫—É–µ–º JUnit —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Ç–µ—Å—Ç–æ–≤
                    junit testResults: '**/build/test-results/apiTest/*.xml',
                            allowEmptyResults: true
                }
            }
        }

        stage('Evaluate API Results') {
            when {
                allOf {
                    expression { !params.SKIP_TESTS }
                    expression { params.TEST_SUITE == 'sequential' }
                    expression { currentBuild.currentResult != 'ABORTED' }
                }
            }
            steps {
                script {
                    echo "üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ API —Ç–µ—Å—Ç–æ–≤..."

                    def testResultAction = currentBuild.rawBuild.getAction(
                            hudson.tasks.junit.TestResultAction.class
                    )

                    if (testResultAction != null) {
                        def totalTests = testResultAction.totalCount
                        def failedTests = testResultAction.failCount
                        def passedTests = totalTests - failedTests
                        def passRate = totalTests > 0 ? (passedTests / totalTests) * 100 : 0

                        echo """
=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Ç–µ—Å—Ç–æ–≤ ===
–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}
–ü—Ä–æ—à–ª–æ: ${passedTests}
–£–ø–∞–ª–æ: ${failedTests}
Success Rate: ${String.format('%.2f', passRate)}%
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: ${params.MIN_API_PASS_RATE}%
                        """

                        env.API_PASS_RATE = String.format('%.2f', passRate)
                        env.API_TOTAL_TESTS = totalTests.toString()
                        env.API_PASSED_TESTS = passedTests.toString()

                        def minPassRate = params.MIN_API_PASS_RATE.toDouble()
                        env.RUN_UI_TESTS = (passRate >= minPassRate) ? 'true' : 'false'

                        if (passRate >= minPassRate) {
                            echo "‚úÖ Success rate (${String.format('%.2f', passRate)}%) >= ${minPassRate}%, UI —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã"
                        } else {
                            echo "‚ùå Success rate (${String.format('%.2f', passRate)}%) < ${minPassRate}%, UI —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã"
                        }
                    } else {
                        echo "‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, UI —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã"
                        env.RUN_UI_TESTS = 'true'
                    }
                }
            }
        }

        stage('UI Tests') {
            when {
                allOf {
                    expression { !params.SKIP_TESTS }
                    anyOf {
                        expression { params.TEST_SUITE == 'ui' }
                        expression { params.TEST_SUITE == 'all' }
                        expression {
                            params.TEST_SUITE == 'sequential' && env.RUN_UI_TESTS == 'true'
                        }
                    }
                }
            }
            steps {
                script {
                    echo "üöÄ –ó–∞–ø—É—Å–∫ UI —Ç–µ—Å—Ç–æ–≤..."

                    // –ù–ï –æ—á–∏—â–∞–µ–º build/allure-results - —Ç–∞–º –ª–µ–∂–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Ç–µ—Å—Ç–æ–≤!
                    def uiTestResult = sh(
                            script: """
                            ./gradlew uiTest \\
                            -Djunit.threads=${params.THREADS} \\
                            -Dtest.environment=${params.ENVIRONMENT} \\
                            -Dbrowser=${params.BROWSER} \\
                            --no-daemon \\
                            --console=plain
                        """,
                            returnStatus: true
                    )

                    env.UI_TEST_STATUS = uiTestResult.toString()

                    if (uiTestResult != 0) {
                        echo "‚ö†Ô∏è  UI —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: ${uiTestResult})"
                    } else {
                        echo "‚úÖ UI —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
                    }
                }
            }
            post {
                always {
                    // –ü—É–±–ª–∏–∫—É–µ–º JUnit —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã UI —Ç–µ—Å—Ç–æ–≤
                    junit testResults: '**/build/test-results/uiTest/*.xml',
                            allowEmptyResults: true
                }
            }
        }

        stage('Run All Tests') {
            when {
                allOf {
                    expression { !params.SKIP_TESTS }
                    expression { params.TEST_SUITE == 'all' }
                }
            }
            steps {
                script {
                    echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (API + UI –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)..."

                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean'

                    sh """
                        ./gradlew test \\
                        -Djunit.threads=${params.THREADS} \\
                        -Dtest.environment=${params.ENVIRONMENT} \\
                        -Dbrowser=${params.BROWSER} \\
                        --no-daemon \\
                        --console=plain
                    """
                }
            }
            post {
                always {
                    junit testResults: '**/build/test-results/test/*.xml',
                            allowEmptyResults: true
                }
            }
        }
    }

    post {
        always {
            script {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π Allure –æ—Ç—á—ë—Ç –∏–∑ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if (params.GENERATE_REPORT) {
                    echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á—ë—Ç–∞..."

                    allure includeProperties: false,
                            jdk: '',
                            results: [[path: 'build/allure-results']]
                }

                // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if (params.TEST_SUITE == 'sequential') {
                    echo """
=== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
API —Ç–µ—Å—Ç—ã: ${env.API_TOTAL_TESTS ?: 'N/A'} (–ø—Ä–æ—à–ª–æ: ${env.API_PASSED_TESTS ?: 'N/A'}, success rate: ${env.API_PASS_RATE ?: 'N/A'}%)
UI —Ç–µ—Å—Ç—ã: ${env.RUN_UI_TESTS == 'true' ? '–ó–∞–ø—É—â–µ–Ω—ã' : '–ü—Ä–æ–ø—É—â–µ–Ω—ã'}
                    """
                }
            }
        }

        success {
            echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${params.ENVIRONMENT}"
        }

        failure {
            echo "‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${params.ENVIRONMENT}"
        }

        unstable {
            echo "‚ö†Ô∏è  –°–±–æ—Ä–∫–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ (–µ—Å—Ç—å —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã)"
        }
    }
}
